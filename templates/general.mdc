---
description: 
globs: 
alwaysApply: false
---
# Lyfe's通用编程规则

## 代码风格与规范
- 所有注释使用中文，提高团队协作效率
- 变量名和函数名使用英文，但要有明确的语义
- 遵循项目既定的代码风格，保持一致性
- 每个文件顶部添加功能说明注释

## 命名规范
- 变量名：使用驼峰命名法，如 `userName`、`orderList`
- 常量：使用大写字母和下划线，如 `MAX_RETRY_COUNT`
- 函数名：动词开头，语义明确，如 `getUserInfo()`、`calculateTotal()`
- 类名：使用帕斯卡命名法，如 `UserService`、`OrderManager`

## 函数设计原则
- 单一职责：每个函数只做一件事
- 函数长度：建议不超过50行，超过考虑拆分
- 参数数量：不超过5个，多了考虑使用对象传参
- 返回值：类型明确，避免返回null或undefined

## 错误处理
- 预期错误：使用返回值或错误码处理
- 意外错误：使用异常处理机制
- 错误信息：提供中文错误描述，便于调试
- 日志记录：记录关键操作和错误信息

## 注释规范
- 业务逻辑：复杂算法必须添加注释说明
- API文档：公开方法必须有注释说明用途、参数、返回值
- TODO标记：未完成功能用TODO标记，包含负责人和时间
- 示例：`// TODO 2024-01-01 张三: 添加用户权限验证`

## 性能优化指导
- 避免重复计算：缓存计算结果
- 数据结构选择：根据使用场景选择合适的数据结构
- 内存管理：及时释放不用的资源，避免内存泄漏
- 异步操作：IO密集型操作使用异步处理

## 安全编码实践
- 输入验证：所有用户输入都要验证
- 输出编码：防止XSS攻击，对输出内容进行编码
- 权限检查：敏感操作前检查用户权限
- 敏感信息：不在代码中硬编码密码、密钥等

## 版本控制规范
- 提交信息：使用中文，格式为 "类型: 简短描述"
- 提交粒度：每次提交解决一个具体问题
- 分支命名：feature/功能名称，bugfix/问题描述
- 代码审查：重要功能必须经过代码审查

## 测试指导
- 单元测试：核心业务逻辑必须有测试覆盖
- 集成测试：关键业务流程要有端到端测试
- 测试数据：使用模拟数据，不要依赖生产环境
- 测试命名：测试方法名要能清楚表达测试意图

## 文档要求
- README：项目说明、安装部署步骤
- API文档：接口说明、参数类型、示例
- 更新日志：记录版本变更内容
- 架构图：复杂项目需要架构设计文档